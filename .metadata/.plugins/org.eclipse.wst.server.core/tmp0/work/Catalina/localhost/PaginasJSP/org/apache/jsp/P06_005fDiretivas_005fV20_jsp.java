/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.24
 * Generated at: 2024-07-27 10:08:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.Date;
import java.text.DecimalFormat;
import java.util.Locale;
import java.text.NumberFormat;

public final class P06_005fDiretivas_005fV20_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

 static double taxaJuro = 4.5; 
 double emprestimo = 16000.0; 

    public static double getTaxaJuro() {
        return taxaJuro;
    }
    public static double calculoJuros(double capitalEmDivida) {
        return (capitalEmDivida * taxaJuro / 100.0);
    }


    public double myRound(double x) {
        return (Math.round(x*100.0)/100.0);
    }

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("java.text.DecimalFormat");
    _jspx_imports_classes.add("java.text.NumberFormat");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>P06_Diretivas</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h1>Diretivas JSP</h1>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    ");
 int meses = 72; 
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    <table border=\"1\">\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>Mês</th>\r\n");
      out.write("            <th>Empréstimo</th>\r\n");
      out.write("            <th>Capital em divida</th>\r\n");
      out.write("            <th>Divida/meses</th>\r\n");
      out.write("            <th>Taxa de juro</th>\r\n");
      out.write("            <th>Total de juros</th>\r\n");
      out.write("            <th>Juro mensal</th>\r\n");
      out.write("            <th>Prestação mensal não constante</th>\r\n");
      out.write("            <th>Total pago com juros</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");

            Locale.setDefault(Locale.of("pt", "PT"));
            //Locale.setDefault(Locale.of("pt", "BR"));
            //Locale.setDefault(Locale.of("es", "ES"));
            //Locale.setDefault(Locale.of("en", "US"));
            //Locale.setDefault(Locale.US);
            //Locale.setDefault(Locale.UK);
            //Locale.setDefault(Locale.JAPAN);
            NumberFormat formatter = NumberFormat.getCurrencyInstance(Locale.getDefault()); 
            String currency = formatter.getCurrency().toString();
            DecimalFormat f = new DecimalFormat("###,###,##0.00");
            double capitalEmDivida = emprestimo;
            double dividaPorMes = myRound(emprestimo/meses);
            double totalJuros = myRound(capitalEmDivida*getTaxaJuro()/100);
            double juroMensal = myRound(totalJuros/12.0);
            double prestacaoMensal = dividaPorMes + juroMensal;
            double totalPagoComJuros = prestacaoMensal;
            
            for (int i=1; i<=meses; i++) {
                out.println("<tr>");
                out.println("<td style=\"text-align:right;\">" + i + "</td>");
                out.println("<td style=\"text-align:right;\">" + f.format(emprestimo) + " " + currency + "</td>");
                out.println("<td style=\"text-align:right;\">" + f.format(capitalEmDivida) + " " + currency + "</td>");
                out.println("<td style=\"text-align:right;\">" + f.format(dividaPorMes) + " " + currency + "</td>");
                out.println("<td style=\"text-align:right;\">" + f.format(getTaxaJuro()) + " " + currency + "</td>");
                out.println("<td style=\"text-align:right;\">" + f.format(totalJuros) + " " + currency + "</td>");
                out.println("<td style=\"text-align:right;\">" + f.format(juroMensal) + " " + currency + "</td>");
                out.println("<td style=\"text-align:right;\">" + f.format(prestacaoMensal) + " " + currency + "</td>");
                out.println("<td style=\"text-align:right;\">" + f.format(totalPagoComJuros) + " " + currency + "</td>");
                out.println("</tr>");
                capitalEmDivida = capitalEmDivida - dividaPorMes;
                totalJuros = myRound(capitalEmDivida*getTaxaJuro()/100);
                juroMensal = myRound(totalJuros/12.0);
                prestacaoMensal = dividaPorMes + juroMensal;
                totalPagoComJuros = totalPagoComJuros + prestacaoMensal;
            }
        
      out.write("\r\n");
      out.write("    </table>\r\n");
      out.write("    <hr>\r\n");
      out.write("    <p>Valor do empréstimo = ");
      out.print( f.format(emprestimo)+ " " + currency );
      out.write(" \r\n");
      out.write("        <br>Total pago com juros = ");
      out.print( f.format(totalPagoComJuros - prestacaoMensal) + " " + currency );
      out.write("\r\n");
      out.write("        <br>Acerto da última prestação = ");
      out.print( f.format(capitalEmDivida) + " " + currency );
      out.write("\r\n");
      out.write("        <br>Prestação mensal constante = ");
      out.print( f.format((totalPagoComJuros - prestacaoMensal) / meses) + " " + currency );
      out.write("\r\n");
      out.write("           <br>Taxa de juro = ");
      out.print( f.format(getTaxaJuro()) );
      out.write("\r\n");
      out.write("           <!-- <br>Meses = ");
      out.write(" -->\r\n");
      out.write("           <br>Meses = ");
      out.print( meses );
      out.write("</p>\r\n");
      out.write("       <p>Simulação feita em ");
      out.print( new Date() );
      out.write("</p>\r\n");
      out.write("    <hr>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
